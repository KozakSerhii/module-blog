<?php
    /**
    * Copyright Â© Magefan (support@magefan.com). All rights reserved.
    * Please visit Magefan.com for license details (https://magefan.com/end-user-license-agreement).
    *
    * Glory to Ukraine! Glory to the heroes!
    */

    declare(strict_types=1);

    namespace Magefan\Blog\Plugin\Amasty\XmlSitemap\Model;

    use Magefan\Blog\Model\CategoryFactory;
    use Magefan\Blog\Model\PostFactory;
    use Magento\Framework\DataObject;
    use Magento\Sitemap\Model\Sitemap;
    use Magefan\Blog\Model\Config;

    class XmlGenerator
    {

    /**
    * @var \Magefan\Blog\Model\SitemapFactory
    */
    protected $sitemapFactory;

    /**
    * @var CategoryFactory
    */
    protected $categoryFactory;

    /**
    * @var PostFactory
    */
    protected $postFactory;

    /**
    * @var mixed
    */
    protected $config;

    /**
    * Generated sitemaps
    * @var array
    */
    protected $generated = [];

    /**
    * SitemapPlugin constructor.
    * @param \Magefan\Blog\Model\SitemapFactory $sitemapFactory
    * @param CategoryFactory $categoryFactory
    * @param PostFactory $postFactory
    * @param null|\Magefan\Blog\Model\Config config
    */
    public function __construct(
    \Magefan\Blog\Model\SitemapFactory $sitemapFactory,
    CategoryFactory $categoryFactory,
    PostFactory $postFactory,
    Config $config
    ) {
    $this->postFactory = $postFactory;
    $this->categoryFactory = $categoryFactory;
    $this->sitemapFactory = $sitemapFactory;
    $this->config = $config;
    }


    /**
    * Generate blog sitemap xml
    * @param  \Magento\Framework\Model\AbstractModel $sitemap
    * @return array
    */
    public function afterGenerate($subject, $result, \Magento\Framework\Model\AbstractModel $sitemap)
    {
    if ($this->isEnabled($sitemap)) {
    $sitemapId = $sitemap->getId() ?: 0;
    if (in_array($sitemapId, $this->generated)) {
    return $result;
    }
    $this->generated[] = $sitemapId;

    $blogSitemap = $this->sitemapFactory->create();
    $blogSitemap->setData(
    $sitemap->getData()
    );

    if (!$blogSitemap->getSitemapId() && $sitemap->getId()) {
    $blogSitemap->setSitemapId($sitemap->getId());
    }

    /* Fix for Amasty\XmlSitemap\Model\Sitemap */
    if ($sitemap->getFilePath()) {
    $filename = pathinfo($sitemap->getFilePath());
    if (!$blogSitemap->getFolderName()) {
    if (isset($filename['basename'])) {
    $blogSitemap->setSitemapFilename(  $filename['basename']);
    }
    }
    if (!$blogSitemap->getFolderName()) {
    if (isset($filename['dirname'])) {
    $blogSitemap->setSitemapPath('/' . $filename['dirname']);
    }
    }
    }

    $blogSitemap->setSitemapFilename(
    'blog_' . $blogSitemap->getSitemapFilename()
    );

    $blogSitemap->generateXml();
    }
    return $result;
    }


    /**
    * @param $sitemap
    * @return mixed
    */
    protected function isEnabled($sitemap)
    {
    return $this->config->isEnabled(
    $sitemap->getStoreId()
    );
    }

    }
